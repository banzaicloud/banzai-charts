kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "fullname" . }}-config
data:
  log4j.properties: |-
    log4j.rootLogger = INFO, stdout, {{- if .Values.logService.host }}, syslog{{- end }}

    log4j.appender.stdout = org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.Threshold = {{ .Values.logService.zeppelinLogLevel }}
    log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=%5p [%d] ({%t} %F[%M]:%L) - %m%n

    log4j.logger.org.apache.zeppelin.interpreter = {{ .Values.logService.zeppelinLogLevel }}

    {{- if .Values.logService.host }}
    log4j.appender.syslog=org.apache.log4j.net.SyslogAppender
    log4j.appender.syslog.threshold={{ .Values.logService.zeppelinLogLevel }}
    log4j.appender.syslog.syslogHost={{ .Values.logService.host }}:{{ .Values.logService.zeppelinLogPort }}
    log4j.appender.syslog.facility={{ .Values.logService.zeppelinFacility }}
    log4j.appender.syslog.layout=org.apache.log4j.PatternLayout
    log4j.appender.syslog.layout.conversionPattern={{ .Values.logService.zeppelinLogPattern }}
    {{- end }}

  log4j_k8s_cluster.properties: |-
    log4j.rootLogger = INFO, stdout{{- if .Values.logService.host }}, syslog{{- end }}

    log4j.appender.stdout = org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=%5p XXX [%d] ({%t} %F[%M]:%L) - %m%n

    {{- if .Values.logService.host }}
    log4j.appender.syslog=org.apache.log4j.net.SyslogAppender
    log4j.appender.syslog.threshold={{ .Values.logService.sparkLogLevel }}
    log4j.appender.syslog.syslogHost={{ .Values.logService.host }}:{{ .Values.logService.sparkLogPort }}
    log4j.appender.syslog.facility={{ .Values.logService.sparkFacility }}
    log4j.appender.syslog.layout=org.apache.log4j.PatternLayout
    log4j.appender.syslog.layout.conversionPattern={{ .Values.logService.sparkLogPattern }}

    log4j.appender.{{ .Values.logService.applicationLoggerName }}=org.apache.log4j.net.SyslogAppender
    log4j.appender.{{ .Values.logService.applicationLoggerName }}.threshold={{ .Values.logService.applicationLogLevel }}
    log4j.appender.{{ .Values.logService.applicationLoggerName }}.syslogHost={{ .Values.logService.host }}:{{ .Values.logService.applicationLogPort }}
    log4j.appender.{{ .Values.logService.applicationLoggerName }}.facility={{ .Values.logService.applicationFacility }}
    log4j.appender.{{ .Values.logService.applicationLoggerName }}.layout=org.apache.log4j.PatternLayout
    log4j.appender.{{ .Values.logService.applicationLoggerName }}.layout.conversionPattern={{ .Values.logService.applicationLogPattern }}
    {{- end }}

  shiro.ini.template: |-
    [users]
    ADMIN_USER_NAME = ADMIN_PASSWORD, admin

    [main]
    sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
    cookie = org.apache.shiro.web.servlet.SimpleCookie
    cookie.name = JSESSIONID
    cookie.httpOnly = true
    sessionManager.sessionIdCookie = $cookie
    securityManager.sessionManager = $sessionManager
    securityManager.sessionManager.globalSessionTimeout = 86400000
    shiro.loginUrl = /api/login
    passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
    iniRealm.credentialsMatcher = $passwordMatcher

    [roles]
    admin = *

    [urls]
    /api/version = anon
    /api/interpreter/setting/restart/** = authc
    /api/interpreter/** = authc, roles[admin]
    /api/configurations/** = authc, roles[admin]
    /api/credential/** = authc, roles[admin]
    #/** = anon
    /** = authc
