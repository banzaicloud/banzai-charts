apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "kv.tidb.fullname" . }}"
  labels:
    app: "{{ template "kv.tidb.fullname" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: "{{ template "kv.tidb.fullname" . }}"
  replicas: {{ .Values.tikv.replicaCount }}
  template:
    metadata:
      labels:
        heritage: "{{ .Release.Service }}"
        release: "{{ .Release.Name }}"
        app: {{ template "tidb.fullname" . }}
        component: "{{ template "kv.tidb.fullname" . }}"

    spec:
      initContainers:
      - name: check-pd-port
        image: busybox
        command: ['sh', '-c', 'echo STATUS nc -w 1 {{ template "tidb.fullname" . }}-pd:{{ .Values.pd.service.ClientPort }}']

      containers:
      - name: tikv
        image: "{{ .Values.tikv.image }}"
        imagePullPolicy: {{ .Values.tikv.imagePullPolicy | quote }}
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        command:
        - "/bin/sh"
        - "-ecx"
        - |
          /tikv-server \
          --addr="0.0.0.0:{{ .Values.tikv.service.ClientPort }}" \
          --advertise-addr="$(MY_POD_IP):{{ .Values.tikv.service.ClientPort }}" \
          --data-dir="/data/tikv" \
          --pd="{{ template "tidb.fullname" . }}-pd:{{ .Values.pd.service.ClientPort }}"

        ports:
          - containerPort: {{ .Values.tikv.service.ClientPort }}
        livenessProbe:
        readinessProbe:
          tcpSocket:
            port: {{ .Values.tikv.service.ClientPort }}
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
        readinessProbe:
          tcpSocket:
            port: {{ .Values.tikv.service.ClientPort }}
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.tikv.resources | indent 10 }}

{{- if .Values.tikv.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.tikv.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.tikv.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.tikv.persistence.size | quote }}
      {{- if .Values.tikv.persistence.storageClass }}
      {{- if (eq "-" .Values.tikv.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.tikv.persistence.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
      volumes:
        - name: data
          emptyDir: {}
{{- end }}