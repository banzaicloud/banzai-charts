{{- if .Values.vault.enabled }}
apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: {{ .Values.vault.name }}
  labels:
    app: {{ .Values.vault.name }}
    chart: {{ include "vault-operator.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  size: {{ .Values.vault.size }}
  image: {{ .Values.vault.image }}
  bankVaultsImage: {{ .Values.vault.bankVaultsImage }}
  resources:
{{ toYaml .Values.vault.resources | indent 4 }}
  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: {{ .Values.vault.serviceAccount }}
  # Specify the Service's type where the Vault Service is exposed
  serviceType: {{ .Values.vault.serviceType }}
    # Use local disk to store Vault file data, see config section.
{{- if .Values.vault.config.storage.file }}
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file
  volumeMounts:
    - name: vault-file
      mountPath: /vault/file
{{- end }} 
  # This option gives us the option to workaround current StatefulSet limitations around updates
  # See: https://github.com/kubernetes/kubernetes/issues/67250
  # By default it is false.
  supportUpgrade: {{ .Values.vault.supportUpgrade }}
  # Set use which node label for pod anti-affinity. Prevent all vault put on same AZ.
  # Detail can reference: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # And: https://kubernetes.io/docs/setup/multiple-zones/#nodes-are-labeled
  podAntiAffinity: {{ .Values.vault.podAntiAffinity }}
  # This option allows you to annotate the ETCD Cluster that Vault Operator creates.
  # It's specifically to annotate the ETCD Cluster as 'clusterwide' for a cluster wide
  # ETCD Operator, however it can be used to set any arbitrary annotations on the ETCD Cluster.
{{- if .Values.vault.etcdAnnotations }}
  etcdAnnotations:
{{ toYaml .Values.vault.etcdAnnotations | indent 4 }}
{{- end }} 
  # Support for custom Vault (and sidecar) pod annotations
{{- if .Values.vault.annotations }}
  annotations:
{{ toYaml .Values.vault.annotations | indent 4 }}
{{- end }}
  # Describe where you would like to store the Vault unseal keys and root token
  # in S3 encrypted with KMS.
{{- if .Values.vault.unsealConfig }}
  unsealConfig:
{{ toYaml .Values.vault.unsealConfig | indent 4 }}
{{- end }}
  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
{{- if .Values.vault.config }}
  config:
{{ toYaml .Values.vault.config | indent 4 }}
{{- end }}
  # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
{{- if .Values.vault.externalConfig }}
  externalConfig:
{{ toYaml .Values.vault.externalConfig | indent 4 }}
{{- end }}
  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: {{ .Values.vault.logLevel }}
  # If you are not using IAM instance profiles to authenticate against AWS you can pass in an
  # AWS credentials refering to a Secret with the following configuration block. You have to
  # create the "aws-cred" secret manually, it has to have a key called "credentials" holding
  # the configuration in the following format:
  # https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#the-shared-credentials-file
  # credentialsConfig:
  #   env: AWS_SHARED_CREDENTIALS_FILE
  #   path: /etc/aws/credentials
  #   secretName: aws-cred
{{- end }}
---
{{- if .Values.vault.config.storage.file }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
spec:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  # storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
{{- end }}