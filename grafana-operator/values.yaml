## Default values for grafana-operator.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

## String to partially override metallb.fullname include (will maintain the release name)
##
# nameOverride:

## String to fully override metallb.fullname template
##
# fullnameOverride:

## Number of grafana-operator Pod replicas
##
replicaCount: 1

## Set up update strategy for Grafana installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods is destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate

## Deploy CRDs
##
createCustomResource: true

customResourceGroupRemap:
  enabled: false
  newGroup: "" # name of the new group to map the monitoring.coreos.com to

image:
  registry: quay.io
  repository: integreatly/grafana-operator
  tag: v3.5.0
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

args:
  ## If one of these options is set a clusterRole and clusterRoleBinding is created to
  ## ensure that the operator is able to get data from other namespaces.
  scanAllNamespaces: false
  scanNamespaces: []


grafana:
  image:
    registry: docker.io
    repository: grafana/grafana
    tag: 7.1.3

grafanaPluginInit:
  image:
    registry: quay.io
    repository: integreatly/grafana_plugins_init
    tag: 0.0.3

#Enable Default Dashboards
defaultDashboards:
  enabled: true
#Enable kubeScheduler Dashboard
  kubeScheduler:
    enabled: true
#Enable kubeProxy Dashboard
  kubeProxy:
    enabled: true
#Enable kubelet Dashboard
  kubelet:
    enabled: true
#Enable kubeEtcd Dashboard
  kubeEtcd:
    enabled: true
#Enable kubeControllerManager Dashboard
  kubeControllerManager:
    enable: true
#Enable kubeApiServer Dashboard
  kubeApiServer:
    enabled: true
#Enable prometheus Dashboard
  prometheus:
    prometheusSpec:
      remoteWriteDashboards: false
#Enable Node Exporter Dashboard
  nodeExporter:
    enabled: true

#Enable Default Grafana Instance
defaultDeployment:
  enabled: True

  ingress:
    enabled: True

  log:
    mode: console
    level: warn

  security:
    adminUser: "root"
    adminPassword: "secret"

  auth:
    disableLoginForm: False
    disableSignoutMenu: True
    anonymous: False

  resources: {}


defaultDatasouce:
  enabled: True

  name: Prometheus
  type: prometheus
  access: proxy
  url: http://monitor-prometheus-operato-prometheus:9090
  isDefault: true
  version: 1
  editable: true
  jsonData:
    tlsSkipVerify: true
    timeInterval: "5s"

rbac:
  # create specifies whether to install and use RBAC rules.
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

## Pod securityContext
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  supplementalGroups: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

prometheus:
  # Prometheus Operator service monitors
  serviceMonitor:
    # enable support for Prometheus Operator
    enabled: false
    # Job label for scrape target
    jobLabel: app.kubernetes.io/name
    # Scrape interval. If not set, the Prometheus default scrape interval is used.
    interval: ""
    metricRelabelings: []
    relabelings: []

## Liveness and readiness probe values
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
