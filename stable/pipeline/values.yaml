# Default values for pipeline
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  auth:
    clientid: ""
    clientsecret: ""

replicaCount: 1

image:
  repository: banzaicloud/pipeline
  tag: latest
  pullPolicy: IfNotPresent

service:
  name: pipeline
  type: ClusterIP
  internalPort: 9090
  externalPort:  9090

logging:
  logformat: text
  loglevel: debug
  kubicornloglevel: debug

cloud:
  cloudprovider: aws
  cloudprofile: default
  gkeCredentialPath: "/root/gke/gke-credential.json"
  keypath: "/root/.ssh/id_rsa.pub"

gkeCredentials:
  client_id: ""
  client_secret: ""
  refresh_token: ""
  type: ""

auth:
  jwtissueer: "https://banzaicloud.com/"
  jwtaudience: "https://pipeline.banzaicloud.com"
  clientid: ""
  clientsecret: ""

helm:
  retryAttempt: "30"
  retrySleepSeconds: "15"

  stableRepositoryURL: "https://kubernetes-charts.storage.googleapis.com"
  banzaiRepositoryURL: "http://kubernetes-charts.banzaicloud.com"

Slack:
  WebhookUrl: ""
  Channel: ""

Helm:
  retryAttempt: 30
  retrySleepSeconds: 15

monitor:
  enabled: true
  configMap: prometheus-certs
  mountPath: /etc/prometheus-certs

statestore:
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## Pipeline StateStore data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 128Mi

##
## MariaDB chart configuration
##
mariadb:
  enabled: false
  nameOverride: pipeline-db

  ## MariaDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  # mariadbRootPassword:

  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
  ##
  mariadbDatabase: pipeline

  ## Create a database user
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  mariadbUser: bonanzabanzai
  
  ## Password for mariadbUser
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  # mariadbPassword:

  ## File containing SQL statements that will be executed by the server on startup.
  ## ref: https://mariadb.com/kb/en/library/server-system-variables/#init_file
  ##
  initSQL: |-
    CREATE DATABASE IF NOT EXISTS drone;
    GRANT ALL PRIVILEGES ON drone.* TO 'bonanzabanzai'@'%';
    FLUSH PRIVILEGES;

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    ## mariadb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    # accessMode: ReadWriteOnce
    # size: 8Gi

##
## CloudSQL configuration
##
cloudsql:
  enabled: false
  instance: ""
  dbName: ""
  dbUserName: ""
  dbUserPass: ""
  image:
    repository: gcr.io/cloudsql-docker/gce-proxy
    tag: 1.11
    pullPolicy: IfNotPresent


vault:
  vault:
    externalConfig:
      policies:
        - name: allow_accesstokens_and_orgs
          rules: path "secret/data/accesstokens/*" {
                  capabilities = ["create", "read", "update"]
                }
                path "secret/metadata/accesstokens/*" {
                  capabilities = ["delete", "list"]
                }
                path "secret/data/orgs/*" {
                  capabilities = ["create", "read", "update"]
                }
                path "secret/metadata/orgs/*" {
                  capabilities = ["delete", "list"]
                }
      auth:
        - type: kubernetes
          # Allows creating roles in Vault which can be used later on for the Kubernetes based
          # authentication.
          # See https://www.vaultproject.io/docs/auth/kubernetes.html#creating-a-role for
          # more information.
          roles:
            # Allow pipeline pod in the all namespaces to use the secret kv store
            - name: pipeline
              bound_service_account_names: pipeline
              bound_service_account_namespaces: "*"
              policies: allow_accesstokens_and_orgs
              ttl: 1h
      secrets:
        - path: secret
          type: kv
          description: General secrets.
          options:
            version: 2
resources:
  requests:
    cpu: 250m
    memory: 256Mi


