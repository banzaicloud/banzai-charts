{{- $root := . }}
{{ if .Values.store.enabled }}
{{- range $index, $partion := .Values.store.timePartioning }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thanos.componentname" (list $ "store") }}-{{ $index }}
  labels:
    app.kubernetes.io/name: {{ include "thanos.name" $root }}
    helm.sh/chart: {{ include "thanos.chart" $root }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: store
    app.kubernetes.io/partition: "{{ $index }}"
{{ with $root.Values.store.deploymentLabels }}{{ toYaml . | indent 4 }}{{ end }}
  {{- with $root.Values.store.deploymentAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ $root.Values.store.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "thanos.name" $root }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
      app.kubernetes.io/component: store
      app.kubernetes.io/partition: "{{ $index }}"
  template:
    metadata:
      labels:
{{ with $root.Values.store.labels }}{{ toYaml . | indent 8 }}{{ end }}
        app.kubernetes.io/name: {{ include "thanos.name" $root }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/component: store
        app.kubernetes.io/partition: "{{ $index }}"
      {{- if or $root.Values.store.annotations $root.Values.store.metrics.annotations.enabled }}
      annotations:
      {{- end }}
      {{- with  $root.Values.store.annotations }}{{ toYaml . | nindent 8 }}{{- end }}
      {{- if $root.Values.store.metrics.annotations.enabled  }}
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ $root.Values.store.http.port }}"
      {{- end }}
    spec:
      containers:
      - name: thanos-store
        image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
        imagePullPolicy: {{ $root.Values.image.pullPolicy }}
        {{- with $root.Values.store.extraEnv }}
        env: {{ toYaml . | nindent 8 }}
        {{- end }}
        args:
        - "store"
        - "--data-dir=/var/thanos/store"
        - "--log.level={{ $root.Values.store.logLevel }}"
        - "--http-address=0.0.0.0:{{ $root.Values.store.http.port }}"
        - "--grpc-address=0.0.0.0:{{ $root.Values.store.grpc.port }}"
        - "--objstore.config-file=/etc/config/object-store.yaml"
        {{- if $root.Values.store.indexCacheSize }}
        - "--index-cache-size={{ $root.Values.store.indexCacheSize }}"
        {{- end }}
        {{- if $root.Values.store.chunkPoolSize }}
        - "--chunk-pool-size={{ $root.Values.store.chunkPoolSize }}"
        {{- end }}
        {{- if $root.Values.store.grpcSeriesSampleLimit }}
        - "--store.grpc.series-sample-limit={{ $root.Values.store.grpcSeriesSampleLimit }}"
        {{- end }}
        {{- if $root.Values.store.grpcSeriesMaxConcurrency }}
        - "--store.grpc.series-max-concurrency={{ $root.Values.store.grpcSeriesMaxConcurrency }}"
        {{- end }}
        {{- if $root.Values.store.syncBlockDuration }}
        - "--sync-block-duration={{ $root.Values.store.syncBlockDuration }}"
        {{- end }}
        {{- if $root.Values.store.blockSyncConcurrency }}
        - "--block-sync-concurrency={{ $root.Values.store.blockSyncConcurrency }}"
        {{- end }}
        {{- if $partion.max }}
        - "--max-time={{ $partion.max }}"
        {{- end}}
        {{- if $partion.min }}
        - "--min-time={{ $partion.min }}"
        {{- end}}
        {{- if $root.Values.store.extraArgs }}
        {{ toYaml $root.Values.store.extraArgs | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ $root.Values.store.http.port }}
        - name: grpc
          containerPort: {{ $root.Values.store.grpc.port }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: data
          mountPath: /var/thanos/store
        {{- if $root.Values.store.certSecretName }}
        - mountPath: /etc/certs
          name: {{ $root.Values.store.certSecretName }}
          readOnly: true
        {{- end }}
        {{- if $root.Values.store.livenessProbe }}
        livenessProbe:
        {{ toYaml $root.Values.store.livenessProbe | nindent 8 }}
        {{- end }}
        {{- if $root.Values.store.readinessProbe }}
        readinessProbe:
        {{ toYaml $root.Values.store.readinessProbe | nindent 8 }}
        {{- end }}
        resources:
          {{ toYaml $root.Values.store.resources | nindent 10 }}
      volumes:
      - name: data
      {{- if $root.Values.store.dataVolume.backend }}
        {{ toYaml $root.Values.store.dataVolume.backend | nindent 8 }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: config-volume
        secret:
          {{- if $root.Values.objstoreSecretOverride }}
          secretName: "{{ $root.Values.objstoreSecretOverride }}"
          {{- else }}
          secretName: {{ include "thanos.fullname" $root }}
          {{- end }}
      {{- if $root.Values.store.certSecretName }}
      - name: {{ $root.Values.store.certSecretName }}
        secret:
          defaultMode: 420
          secretName: {{ $root.Values.store.certSecretName }}
      {{- end }}
      {{- with $root.Values.store.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.store.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.store.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.store.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with  $root.Values.store.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
---
{{- end }}
{{- end }}
