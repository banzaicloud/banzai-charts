apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "cicd.fullname" . }}"
  labels:
    app: "{{ template "cicd.name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: cicd
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- with .Values.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ template "cicd.name" . }}"
      release: "{{ .Release.Name }}"
      component: cicd
  template:
    metadata:
      labels:
        app: "{{ template "cicd.name" . }}"
        release: "{{ .Release.Name }}"
        component: cicd
    spec:
      serviceAccount: "{{ template "cicd.fullname" . }}"
      containers:
{{- if .Values.cloudsql.enabled }}
      - name: cloudsql-proxy
        image: "{{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}"
        command: ["/cloud_sql_proxy",
                  "-instances={{ .Values.cloudsql.instance }}=tcp:3306"]
{{- end }}
      - name: cicd-server
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/cicd-server"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: CICD_SECRET
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: CICD_HOST
            {{- if hasKey .Values.server "host" }}
            value: {{ .Values.server.host }}
            {{- else }}
            value: http://{{ template "cicd.fullname" . }}
            {{- end }}
          - name: CICD_GITHUB
            value: "true"
          - name: CICD_GITHUB_CLIENT
            value: {{ .Values.global.auth.clientid | quote }}
          - name: CICD_GITHUB_SECRET
            value: {{ .Values.global.auth.clientsecret | quote }}
          - name: CICD_DATABASE_DRIVER
            value: "mysql"
        {{- if .Values.mysql.enabled }}
          - name: CICD_DATABASE_PORT
            value: "3306"
          - name: CICD_DATABASE_NAME
            value: {{ default "drone" .Values.mysql.mysqlDatabase | quote }}
          - name: CICD_DATABASE_USER
            value: {{ default "" .Values.mysql.mysqlUser | quote }}
          - name: CICD_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.mysql.existingSecret }}
                key: mysql-password
          - name: CICD_DATABASE_HOST
            value: {{ default "localhost" .Values.mysql.host | quote }}
        {{- else if .Values.cloudsql.enabled }}
          - name: CICD_DATABASE_DATASOURCE
            value: {{ .Values.cloudsql.dbUserName }}:{{ .Values.cloudsql.dbUserPass }}@tcp(127.0.0.1:3306)/drone?parseTime=true
        {{- end }}

        {{- if hasKey .Values.ingress "hosts" }}
          - name: CICD_EXTERNAL_URL
            value: https://{{ index .Values.ingress.hosts 0 }}
        {{- end }}

          - name: CICD_BUILD_URL
            value: "https://{{ .Values.global.pipelineHost }}/ui"
          - name: PIPELINE_BASEPATH
            value: "https://{{ .Values.global.pipelineHost }}{{ .Values.global.pipelineBasepath }}"
          - name: PIPELINE_EXTERNAL_BASEPATH
            value: "https://{{ .Values.global.pipelineHost }}{{ .Values.global.pipelineBasepath }}"

        {{- range $key, $value := .Values.server.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}

        volumeMounts:
        - mountPath: /var/lib/cicd
          name: cicd-disk
          readOnly: false
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: grpc
          containerPort: 9000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        resources:
{{ toYaml .Values.server.resources | indent 10 }}

      - name: cicd-agent
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/cicd-agent"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: CICD_SECRET
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{ range $key, $value := .Values.agent.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{ end }}
        resources:
{{ toYaml .Values.agent.resources | indent 10 }}

      volumes:
      - name: cicd-disk
        {{- if and .Values.server.persistentVolume.enabled (not .Values.server.persistentVolume.existingClaim) }}
        persistentVolumeClaim:
          claimName: {{ template "cicd.fullname" . }}-server
        {{- else }}
        hostPath:
          path: /opt/cicd
        {{- end }}
