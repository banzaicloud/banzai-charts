apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "cicd.fullname" . }}"
  labels:
    app: "{{ template "cicd.name" . }}"
    chart: "{{ template "cicd.chart" .}}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: cicd
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- with .Values.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ template "cicd.name" . }}"
      release: "{{ .Release.Name }}"
      component: cicd
  template:
    metadata:
      labels:
        app: "{{ template "cicd.name" . }}"
        release: "{{ .Release.Name }}"
        component: cicd
    spec:
      serviceAccountName: "{{ template "cicd.serviceAccountName" . }}"
      containers:
      - name: cicd-server
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/cicd-server"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: CICD_SECRET
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: CICD_HOST
            {{- if hasKey .Values.server "host" }}
            value: {{ .Values.server.host }}
            {{- else }}
            value: http://{{ template "cicd.fullname" . }}
            {{- end }}
        {{- if .Values.github.enabled }}
          - name: CICD_GITHUB
            value: "true"
          - name: CICD_GITHUB_CLIENT
            valueFrom:
              secretKeyRef:
                name: {{ default (include "cicd.fullname" .) .Values.github.existingSecret }}
                key: github-client-id
          - name: CICD_GITHUB_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default (include "cicd.fullname" .) .Values.github.existingSecret }}
                key: github-client-secret
        {{- else if .Values.gitlab.enabled }}
          - name: CICD_GITLAB
            value: "true"
          - name: CICD_GITLAB_CLIENT
            valueFrom:
              secretKeyRef:
                name: {{ default (include "cicd.fullname" .) .Values.gitlab.existingSecret }}
                key: gitlab-client-id
          - name: CICD_GITLAB_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ default (include "cicd.fullname" .) .Values.gitlab.existingSecret }}
                key: gitlab-client-secret
        {{- else }}
        {{- fail "Please specify at least one SCM provider" }}
        {{- end }}

          # Database related section
          - name: CICD_DATABASE_HOST
            value: {{ include "cicd.database.host" . }}
          - name: CICD_DATABASE_PORT
            value: {{ include "cicd.database.port" . | quote }}
          - name: CICD_DATABASE_NAME
            value: {{ include "cicd.database.name" . }}
          - name: CICD_DATABASE_USER
            value: {{ include "cicd.database.username" . }}
          - name : CICD_DATABASE_DRIVER
            value: {{ include "cicd.database.driver" . }}
          - name: CICD_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "cicd.database.secretName" .}}
                key: {{ include "cicd.database.secretKey" .}}

        {{- if hasKey .Values.ingress "hosts" }}
          - name: CICD_EXTERNAL_URL
            value: https://{{ index .Values.ingress.hosts 0 }}
        {{- end }}

          - name: CICD_BUILD_URL
            value: "https://{{ .Values.cpHost }}/ui"
          - name: PIPELINE_BASEPATH
            value: "https://{{ .Values.cpHost }}{{ .Values.pipelineBasePath }}"
          - name: PIPELINE_EXTERNAL_BASEPATH
            value: "https://{{ .Values.cpHost }}{{ .Values.pipelineBasePath }}"

        {{- range $key, $value := .Values.server.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}

        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: grpc
          containerPort: 9000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        resources:
{{ toYaml .Values.server.resources | indent 10 }}

      - name: cicd-agent
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/cicd-agent"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: CICD_SECRET
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{ range $key, $value := .Values.agent.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{ end }}
        resources:
{{ toYaml .Values.agent.resources | indent 10 }}
