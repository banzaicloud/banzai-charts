apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}

    spec:
      initContainers:
      {{- if .Values.mysql.enabled  }}
      - name: check-db-service
        image: busybox
        command: ['sh', '-c', 'until nslookup {{ .Release.Name }}-pipeline-db; do echo waiting for {{ .Release.Name }}-pipeline-db; sleep 1; done;']
      - name: check-db-port
        image: busybox
        command: ['sh', '-c', 'echo STATUS nc -w 2 {{ .Release.Name }}-pipeline-db 3306']
      {{- end }}

      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        command: ["/cloud_sql_proxy",
                  "-instances={{ .Values.cloudsql.instance }}=tcp:3306"]
      {{- end }}

      - name: pipeline
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}        
        env:
        - name: KUBERNETES_RELEASE_NAME
          value: "{{ .Release.Name }}"
        - name: KUBERNETES_NAMESPACE
          value: "{{ .Release.Namespace }}"

        - name: PIPELINE_PIPELINE_BASEPATH
          value: {{ .Values.global.pipelineBasepath | quote }}

        - name: PIPELINE_DATABASE_AUTOMIGRATEENABLED
          value: {{ .Values.database.autoMigrateEnabled | quote }}

        {{- if .Values.mysql.enabled  }}
        - name: PIPELINE_DATABASE_HOST
          value: "{{ .Release.Name }}-pipeline-db"
        - name: PIPELINE_DATABASE_DBNAME
          value: {{ default "" .Values.mysql.mysqlDatabase | quote }}
        - name: PIPELINE_DATABASE_USER
          value: {{ default "" .Values.mysql.mysqlUser | quote }}
        - name: PIPELINE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name:  "{{ .Release.Name }}-pipeline-db"
              key: mysql-password
        {{- else if .Values.cloudsql.enabled }}
        - name: PIPELINE_DATABASE_HOST
          value: "127.0.0.1"
        - name: PIPELINE_DATABASE_DBNAME
          value: {{ default "" .Values.cloudsql.dbName | quote }}
        - name: PIPELINE_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name:  "{{ template "fullname" . }}-cloudsql"
              key: dbUserName
        - name: PIPELINE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name:  "{{ template "fullname" . }}-cloudsql"
              key: dbUserPass
        {{- end }}

        - name: PIPELINE_LOGGING_LOGFORMAT
          value: {{ .Values.logging.logformat | quote }}
        - name: PIPELINE_LOGGING_LOGLEVEL
          value: {{ .Values.logging.loglevel | quote }}
        - name: PIPELINE_LOGGING_KUBICORNLOGLEVEL
          value: {{ .Values.logging.kubicornloglevel | quote }}

        - name: PIPELINE_AUTH_CLIENTID
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: githubClientId
        - name: PIPELINE_AUTH_CLIENTSECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: githubClientSecret
        - name: PIPELINE_AUTH_TOKENSIGNINGKEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: tokenSigningKey
        - name: PIPELINE_AUTH_JWTISSUEER
          value: {{ .Values.auth.jwtissueer | quote }}
        - name: PIPELINE_AUTH_JWTAUDIENCE
          value: {{ .Values.auth.jwtaudience | quote }}
        - name: PIPELINE_AUTH_COOKIEDOMAIN
          value: {{ .Values.auth.cookieDomain | quote }}
        - name: PIPELINE_AUTH_SECURECOOKIE
          value: "{{ .Values.auth.secureCookie }}"
        - name: PIPELINE_AUTH_WHITELISTENABLED
          value: {{ default "false" .Values.auth.whitelistEnabled | quote}}
        - name: PIPELINE_GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: githubToken

        - name: PIPELINE_DRONE_URL
          value: http://{{ .Release.Name }}-drone:80

        - name: PIPELINE_MONITOR_ENABLED
          value: {{ .Values.monitor.enabled | quote }}
        - name: PIPELINE_MONITOR_CONFIGMAP
          value: "{{ .Release.Name }}-{{ .Values.monitor.configMap }}"
        - name: PIPELINE_MONITOR_MOUNTPATH
          value: {{ default "/etc/prometheus/secrets" .Values.monitor.mountPath | quote }}
        - name: PIPELINE_MONITOR_CERTSECRET
          value: {{ default "prometheus-federation-secrets" .Values.monitor.certSecret | quote }}

        - name: PIPELINE_HELM_RETRYATTEMPT
          value: {{ .Values.helm.retryAttempt | quote }}
        - name: PIPELINE_HELM_RETRYSLEEPSECONDS
          value: {{ .Values.helm.retrySleepSeconds | quote }}
        - name: PIPELINE_HELM_STABLEREPOSITORYURL
          value: {{ .Values.helm.stableRepositoryURL | quote }}
        - name: PIPELINE_HELM_BANZAIREPOSITORYURL
          value: {{ .Values.helm.banzaiRepositoryURL | quote }}

        - name: "PIPELINE_DNS_DOMAIN"
          value: {{ .Values.dns.domain | quote }}

        - name: PIPELINE_EKS_TEMPLATELOCATION
          value: {{ .Values.eks.templateLocation | quote }}  

        - name: VAULT_ADDR
          value: https://{{ .Release.Name }}-vault:8200
        - name: VAULT_CACERT
          value: /vault/tls/ca.crt

        {{- if .Values.service.tls  }}
        - name: PIPELINE_PIPELINE_CERTFILE
          value: /tls/server.crt
        - name: PIPELINE_PIPELINE_KEYFILE
          value: /tls/server.key
        {{ end }}

        {{ range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{ end }}

        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.global.pipelineBasepath }}/api
            port: {{ .Values.service.internalPort }}
          {{- if .Values.service.tls  }}
            scheme: HTTPS
          {{ end }}
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: {{ .Values.global.pipelineBasepath }}/api
            port: {{ .Values.service.internalPort }}
          {{- if .Values.service.tls  }}
            scheme: HTTPS
          {{ end }}
          initialDelaySeconds: 10

        resources:
{{ toYaml .Values.resources | indent 12 }}

        volumeMounts:
        - name: config-volume
          mountPath: /root/config/

        - mountPath: /statestore
          name: statestore

        - mountPath: /cache
          name: cache

        - name: vault-tls
          mountPath: /vault/tls
      {{- if .Values.service.tls  }}
        - name: pipeline-tls
          mountPath: /tls
      {{ end }}
      volumes:
      - name: config-volume
        configMap:
          name: "{{ template "fullname" . }}"

      - name: cache
        {{- if .Values.cache.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ default (printf "%s-cache" (include "fullname" .)) .Values.cache.persistence.existingClaim }}
        {{- else }}
        hostPath:
          path: /opt/pipeline/statestore/cache
        {{- end }}

      - name: statestore
        {{- if .Values.statestore.persistence.enabled }}
        persistentVolumeClaim:
           claimName: {{ default (printf "%s-statestore" (include "fullname" .)) .Values.statestore.persistence.existingClaim }}
        {{- else }}
        hostPath:
          path: /opt/pipeline/statestore/
        {{- end }}
      - name: vault-tls
        secret:
          secretName: "{{ .Release.Name }}-vault-tls"
      {{- if .Values.service.tls  }}
      - name: pipeline-tls
        secret:
          secretName: "{{ template "fullname" . }}-tls"
      {{ end }}
      serviceAccountName: pipeline
