apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cadence.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "cadence.name" . }}
    helm.sh/chart: {{ include "cadence.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/part-of: {{ .Chart.Name }}
data:
  config_template.yaml: |-
    log:
      stdout: true
      level: {{ .Values.server.config.logLevel | quote }}

    persistence:
      defaultStore: default
      visibilityStore: visibility
      numHistoryShards: {{ .Values.server.config.numHistoryShards }}
      datastores:
        default:
          {{- if eq (include "cadence.persistence.driver" (list . "default")) "cassandra" }}
          cassandra:
            hosts: {{ include "cadence.persistence.cassandra.hosts" (list . "default") }}
            port: {{ include "cadence.persistence.cassandra.port" (list . "default") }}
            password: {{ `{{ .Env.CADENCE_STORE_PASSWORD }}` }}
            {{- with (omit .Values.server.config.persistence.default.cassandra "hosts" "port" "password" "existingSecret") }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- if eq (include "cadence.persistence.driver" (list . "default")) "sql" }}
          sql:
            pluginName: {{ include "cadence.persistence.sql.pluginName" (list . "default") }}
            databaseName: {{ .Values.server.config.persistence.default.sql.database }}
            connectAddr: "{{ include "cadence.persistence.sql.host" (list . "default") }}:{{ include "cadence.persistence.sql.port" (list . "default") }}"
            connectProtocol: "tcp"
            user: {{ include "cadence.persistence.sql.user" (list . "default") }}
            password: {{ `{{ .Env.CADENCE_STORE_PASSWORD }}` }}
            {{- with (omit .Values.server.config.persistence.default.sql "pluginName" "host" "port" "connectAddr" "connectProtocol" "database" "databaseName" "user" "password" "existingSecret") }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
        visibility:
          {{- if eq (include "cadence.persistence.driver" (list . "visibility")) "cassandra" }}
          cassandra:
            hosts: {{ include "cadence.persistence.cassandra.hosts" (list . "visibility") }}
            port: {{ include "cadence.persistence.cassandra.port" (list . "visibility") }}
            password: {{ `{{ .Env.CADENCE_VISIBILITY_STORE_PASSWORD }}` }}
            {{- with (omit .Values.server.config.persistence.visibility.cassandra "hosts" "port" "password" "existingSecret") }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- if eq (include "cadence.persistence.driver" (list . "visibility")) "sql" }}
          sql:
            pluginName: {{ include "cadence.persistence.sql.pluginName" (list . "visibility") }}
            databaseName: {{ .Values.server.config.persistence.visibility.sql.database }}
            connectAddr: "{{ include "cadence.persistence.sql.host" (list . "visibility") }}:{{ include "cadence.persistence.sql.port" (list . "visibility") }}"
            connectProtocol: "tcp"
            user: {{ include "cadence.persistence.sql.user" (list . "visibility") }}
            password: {{ `{{ .Env.CADENCE_VISIBILITY_STORE_PASSWORD }}` }}
            {{- with (omit .Values.server.config.persistence.visibility.sql "pluginName" "host" "port" "connectAddr" "connectProtocol" "database" "databaseName" "user" "password" "existingSecret") }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}

    ringpop:
      name: cadence
      bootstrapMode: dns
      bootstrapHosts:
        - {{ include "cadence.componentname" (list . "frontend-headless") }}:{{ .Values.server.frontend.service.port }}
        - {{ include "cadence.componentname" (list . "history-headless") }}:{{ .Values.server.history.service.port }}
        - {{ include "cadence.componentname" (list . "matching-headless") }}:{{ .Values.server.matching.service.port }}
        - {{ include "cadence.componentname" (list . "worker-headless") }}:{{ .Values.server.worker.service.port }}
      maxJoinDuration: 30s

    services:
      frontend:
        rpc:
          port: {{ include "cadence.frontend.internalPort" . }}
          bindOnIP: {{ `{{ default .Env.POD_IP "0.0.0.0" }}` }}
        metrics:
          tags:
            type: frontend
          prometheus:
            timerType: {{ default .Values.server.metrics.prometheus.timerType .Values.server.frontend.metrics.prometheus.timerType }}
            listenAddress: "0.0.0.0:9090"
        {{- if or .Values.server.metrics.statsd .Values.server.frontend.metrics.statsd }}
          statsd:
            hostPort: {{ default .Values.server.metrics.statsd.hostPort .Values.server.frontend.metrics.statsd.hostPort | quote }}
            prefix: "cadence.frontend"
        {{- end}}

      history:
        rpc:
          port: {{ include "cadence.history.internalPort" . }}
          bindOnIP: {{ `{{ default .Env.POD_IP "0.0.0.0" }}` }}
        metrics:
          tags:
            type: history
          prometheus:
            timerType: {{ default .Values.server.metrics.prometheus.timerType .Values.server.history.metrics.prometheus.timerType }}
            listenAddress: "0.0.0.0:9090"
        {{- if or .Values.server.metrics.statsd .Values.server.history.metrics.statsd }}
          statsd:
            hostPort: {{ default .Values.server.metrics.statsd.hostPort .Values.server.history.metrics.statsd.hostPort | quote }}
            prefix: "cadence.history"
        {{- end}}

      matching:
        rpc:
          port: {{ include "cadence.matching.internalPort" . }}
          bindOnIP: {{ `{{ default .Env.POD_IP "0.0.0.0" }}` }}
        metrics:
          tags:
            type: matching
          prometheus:
            timerType: {{ default .Values.server.metrics.prometheus.timerType .Values.server.matching.metrics.prometheus.timerType }}
            listenAddress: "0.0.0.0:9090"
        {{- if or .Values.server.metrics.statsd .Values.server.matching.metrics.statsd }}
          statsd:
            hostPort: {{ default .Values.server.metrics.statsd.hostPort .Values.server.matching.metrics.statsd.hostPort | quote }}
            prefix: "cadence.matching"
        {{- end}}

      worker:
        rpc:
          port: {{ include "cadence.worker.internalPort" . }}
          bindOnIP: {{ `{{ default .Env.POD_IP "0.0.0.0" }}` }}
        metrics:
          tags:
            type: worker
          prometheus:
            timerType: {{ default .Values.server.metrics.prometheus.timerType .Values.server.worker.metrics.prometheus.timerType }}
            listenAddress: "0.0.0.0:9090"
        {{- if or .Values.server.metrics.statsd .Values.server.worker.metrics.statsd }}
          statsd:
            hostPort: {{ default .Values.server.metrics.statsd.hostPort .Values.server.worker.metrics.statsd.hostPort | quote }}
            prefix: "cadence.worker"
        {{- end}}

    clusterMetadata:
      enableGlobalDomain: false
      failoverVersionIncrement: 10
      masterClusterName: "active"
      currentClusterName: "active"
      clusterInformation:
        active:
          enabled: true
          initialFailoverVersion: 0
          rpcName: "cadence-frontend"
          rpcAddress: "127.0.0.1:7933"

    dcRedirectionPolicy:
      policy: "noop"
      toDC: ""

    archival:
      status: "disabled"

    publicClient:
      hostPort: "{{ include "cadence.componentname" (list . "frontend") }}:{{ .Values.server.frontend.service.port }}"

    dynamicConfigClient:
      filepath: "/etc/cadence/config_map/dynamicconfig/config.yaml"
      pollInterval: {{ .Values.dynamicConfig.pollInterval | default "10s" | quote }}

  dynamic_config.yaml: |-
    {{- toYaml .Values.dynamicConfig.values | nindent 12 }}
