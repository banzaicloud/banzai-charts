{{- if hasKey .Values.server.env "DRONE_PROVIDER" }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "drone.fullname" . }}-server
  labels:
    app: {{ template "drone.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "drone.name" . }}
        release: "{{ .Release.Name }}"
        component: server
    spec:
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        command: ["/cloud_sql_proxy",
                  "-instances={{ .Values.cloudsql.instance }}=tcp:3306"]
      {{- end }}
      - name: drone-server
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/drone-server"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: DRONE_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ template "drone.fullname" . }}
                key: secret
          - name: DRONE_HOST
          {{- if hasKey .Values.server "host" }}
            value: {{ .Values.server.host }}
          {{- else }}
            value: {{ template "drone.fullname" . }}
          {{- end }}

          {{ range $key, $value := .Values.server.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{ end }}

          {{ if not (hasKey .Values.server.env "DRONE_GITHUB_CLIENT") }}
          - name: DRONE_GITHUB_CLIENT
            value: {{ .Values.global.auth.clientid | quote }}
          {{ end }}

          {{ if not (hasKey .Values.server.env "DRONE_GITHUB_SECRET") }}
          - name: DRONE_GITHUB_SECRET
            value: {{ .Values.global.auth.clientsecret | quote }}
          {{ end }}

          - name: DRONE_DATABASE_DRIVER
            value: "mysql"
          - name: DRONE_DATABASE_DATASOURCE
        {{- if .Values.mysql.enabled  }}
            value: bonanzabanzai:{{ include "mysql.password" . }}@tcp({{ .Release.Name }}-pipeline-db:3306)/drone?parseTime=true
        {{- else if .Values.cloudsql.enabled }}
            value: {{ .Values.cloudsql.dbUserName }}:{{ .Values.cloudsql.dbUserPass }}@tcp(127.0.0.1:3306)/drone?parseTime=true
        {{- end }}
        {{- if hasKey .Values.ingress "hosts" }}
          - name: DRONE_EXTERNAL_URL
            value: https://{{ index .Values.ingress.hosts 0 }}
        {{- end }}

          - name: PIPELINE_BASEPATH
            value: https://{{ .Release.Name }}-pipeline.{{ .Release.Namespace }}:9090{{ .Values.global.pipelineBasepath }}
          - name: PIPELINE_EXTERNAL_BASEPATH
            value: https://{{ .Values.global.pipelineHost }}{{ .Values.global.pipelineBasepath }}

        volumeMounts:
        - mountPath: /var/lib/drone
          name: drone-disk
          readOnly: false

        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: grpc
          containerPort: 9000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        resources:
{{ toYaml .Values.server.resources | indent 10 }}
      volumes:
      - name: drone-disk
        {{- if and .Values.server.persistentVolume.enabled (not .Values.server.persistentVolume.existingClaim) }}
        persistentVolumeClaim:
                claimName: {{ template "fullname" . }}-server
        {{- else }}
        hostPath:
          path: /opt/drone
        {{- end }}


{{ end }}
